<?php

namespace JOYAS\JoyasBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FacturaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FacturaRepository extends EntityRepository {
    public function findAll() {
        return $this->findBy(array(), array('id' => 'DESC'));
    }

    public function findEntreFechasMensual($fechaDesde, $fechaHasta, $puntoVenta) {
        if ($puntoVenta != '') {
            $query = $this->getEntityManager()->createQueryBuilder()
                            ->select("SUM(e.importe) as total")
                            ->addSelect("SUBSTRING(e.fecha,1,7) AS fecha")
                            ->addSelect("e.ptovta")
                            ->from('JOYAS\JoyasBundle\Entity\Factura', 'e')
                            ->where('e.fecha <= :fechaHasta')
                            ->andWhere('e.fecha >= :fechaDesde')
                            ->andWhere('e.ptovta = :puntoVenta')
                            ->andWhere('e.cae != :cae')
                            ->groupBy('fecha')
                            ->addGroupBy('e.ptovta')
                            ->orderBy('e.fecha')
                            ->setParameter('fechaHasta', $fechaHasta)
                            ->setParameter('fechaDesde', $fechaDesde)
                            ->setParameter('puntoVenta', $puntoVenta)
                            -> setParameter('cae', '""')
                            ->getQuery();
        } else {
            $query = $this->getEntityManager()->createQueryBuilder()
                            ->select("SUM(e.importe) as total")
                            ->addSelect("SUBSTRING(e.fecha,1,7) AS fecha")
                            ->from('JOYAS\JoyasBundle\Entity\Factura', 'e')
                            ->where('e.fecha <= :fechaHasta')
                            ->andWhere('e.fecha >= :fechaDesde')
                            ->andWhere('e.cae != :cae')
                            ->groupBy('fecha')
                            ->orderBy('fecha')
                            ->setParameter('fechaHasta', $fechaHasta)
                            ->setParameter('fechaDesde', $fechaDesde)
                            -> setParameter('cae', '""')
                            ->getQuery();
        }
        return $query->getResult();
    }

    public function getTotalVentasPeriodo($fechaDesde, $fechaHasta, $puntoVenta) {
        if ($puntoVenta != '') {
            return $this->getEntityManager()->createQueryBuilder()
                            ->select("SUM(e.importe) as total")
                            ->from('JOYAS\JoyasBundle\Entity\Factura', 'e')
                            ->where('e.fecha <= :fechaHasta')
                            ->andWhere('e.fecha >= :fechaDesde')
                            ->andWhere('e.cae != :cae')
                            ->andWhere('e.ptovta = :puntoVenta')
                            ->setParameter('fechaHasta', $fechaHasta)
                            ->setParameter('fechaDesde', $fechaDesde)
                            ->setParameter('puntoVenta', $puntoVenta)
                            ->setParameter('cae', '""')
                            ->getQuery()->getSingleScalarResult();
        } else {
            return $this->getEntityManager()->createQueryBuilder()
                            ->select("SUM(e.importe) as total")
                            ->from('JOYAS\JoyasBundle\Entity\Factura', 'e')
                            ->where('e.fecha <= :fechaHasta')
                            ->andWhere('e.fecha >= :fechaDesde')
                            ->andWhere('e.cae != :cae')
                            ->setParameter('fechaHasta', $fechaHasta)
                            ->setParameter('fechaDesde', $fechaDesde)
                            ->setParameter('cae', '""')
                            ->getQuery()->getSingleScalarResult();
        }
    }

    public function findEntreFechasDiario($fechaDesde, $fechaHasta, $puntoVenta) {
        if ($puntoVenta != '') {
            $query = $this->getEntityManager()->createQueryBuilder()
                    ->select("SUM(e.importe) as total")
                    ->addSelect("SUBSTRING(e.fecha,1,10) AS fecha")
                    ->addSelect("e.ptovta")
                    ->from('JOYAS\JoyasBundle\Entity\Factura', 'e')
                    ->where('e.fecha <= :fechaHasta')
                    ->andWhere('e.fecha >= :fechaDesde')
                    ->andWhere('e.ptovta = :puntoVenta')
                    ->andWhere('e.cae != :cae')
                    ->groupBy('fecha')
                    ->addGroupBy('e.ptovta')
                    ->orderBy('e.fecha')
                    ->setParameter('fechaHasta', $fechaHasta)
                    ->setParameter('fechaDesde', $fechaDesde)
                    ->setParameter('puntoVenta', $puntoVenta)
                    ->setParameter('cae', '""')
                    ->getQuery();
        } else {
            $query = $this->getEntityManager()->createQueryBuilder()
                    ->select("SUM(e.importe) as total")
                    ->addSelect("SUBSTRING(e.fecha,1,10) AS fecha")
                    ->from('JOYAS\JoyasBundle\Entity\Factura', 'e')
                    ->where('e.fecha <= :fechaHasta')
                    ->andWhere('e.fecha >= :fechaDesde')
                    ->andWhere('e.cae != :cae')
                    ->groupBy('fecha')
                    ->orderBy('fecha')
                    ->setParameter('fechaHasta', $fechaHasta)
                    ->setParameter('fechaDesde', $fechaDesde)
                    ->setParameter('cae', '""')
                    ->getQuery();
        }
        return $query->getResult();
    }

    public function findEntreFechas($fechaDesde, $fechaHasta, $cliente, $tipo = "F") {
		$query = $this->getEntityManager()->createQueryBuilder()
				->select("e")
				->from('JOYAS\JoyasBundle\Entity\Factura', 'e')
				->where('e.fecha <= :fechaHasta')
				->andWhere('e.fecha >= :fechaDesde')
				->andWhere('e.tipodocumento = :tipodocumento')
				->orderBy('e.fecha')
				->setParameter('fechaHasta', $fechaHasta)
				->setParameter('fechaDesde', $fechaDesde)
				->setParameter('tipodocumento', $tipo)
				->getQuery();
        return $query->getResult();
    }

    public function citiventas($fechaDesde, $fechaHasta, $idusuario){
        $desde = new \DateTime($fechaDesde);
        $hasta = new \DateTime($fechaHasta);
        $hasta->add(new \DateInterval('PT23H30M0S'));
		$query = $this->getEntityManager()->createQuery(
                "SELECT f FROM JOYASJoyasBundle:Factura f
                WHERE f.fecha >= :desde AND f.fecha <= :hasta
                AND f.nrofactura IS NOT NULL
                AND f.usuario = $idusuario
                ORDER BY f.fecha")
                ->setParameter(':desde', $desde)
                ->setParameter(':hasta', $hasta)
                ;
		return $query->getResult()
        ;
    }
}
